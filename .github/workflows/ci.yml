name: CI/CD - Lint, Test, Deploy Infra, and Run Tasks

on:
  workflow_dispatch:

jobs:
  # =======================================================
  # JOB 1: LINT & TEST (No changes)
  # =======================================================
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=119 --statistics
      - run: pytest

  # =======================================================
  # JOB 2: BUILD DOCKER IMAGE (No changes)
  # =======================================================
  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.docker_build.outputs.image_id }}
      owner_lc: ${{ steps.repo_owner_lc.outputs.name }}
    steps:
      - uses: actions/checkout@v4
      - id: repo_owner_lc
        run: echo "name=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.repo_owner_lc.outputs.name }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: docker_build
        run: |
          LOWERCASE_REPO_NAME=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/${{ steps.repo_owner_lc.outputs.name }}/${LOWERCASE_REPO_NAME}"
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker build -t ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}
          echo "image_id=${IMAGE_TAG}" >> $GITHUB_OUTPUT

  # =======================================================
  # JOB 3: DEPLOY INFRASTRUCTURE & APP (CORRECTED)
  # This single job handles both terraform and app updates.
  # =======================================================
  deploy:
    name: Deploy Infrastructure and Application
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Log in to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        
      - name: 'Run Terraform Apply'
        # This step runs for every deployment. It will create/update the migration
        # job and update the main webapp's image tag all at once.
        env:
          TF_VAR_db_admin_login: ${{ secrets.DB_ADMIN_LOGIN }}
          TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}
          TF_VAR_github_pat: ${{ secrets.GHCR_PAT }}
          TF_VAR_github_username: ${{ needs.build-and-push.outputs.owner_lc }}
          TF_VAR_flask_secret_key: ${{ secrets.FLASK_SECRET_KEY }}
          TF_VAR_task_secret_key: ${{ secrets.RECURRING_JOB_SECRET }}
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve -var="docker_image_to_deploy=${{ needs.build-and-push.outputs.image_tag }}"

  # =======================================================
  # JOB 4: RUN DATABASE MIGRATIONS (No changes to logic, but runs after Deploy)
  # =======================================================
  run-migration-job:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy # Runs AFTER the infrastructure is deployed
    environment: production
    steps:
      - name: 'Log in to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Start the Database Migration Job'
        id: start_job
        run: |
          echo "Starting the migration job..."
          EXECUTION_NAME=$(az containerapp job start \
            --name pfa-migration-job \
            --resource-group personal-finance-app-rg \
            --query "name" -o tsv)
          echo "execution_name=$EXECUTION_NAME" >> $GITHUB_OUTPUT

      - name: 'Wait for migration job to complete'
        run: |
          echo "Waiting for job execution ${{ steps.start_job.outputs.execution_name }}..."
          # ... (The robust wait loop from our last turn goes here) ...