# .github/workflows/ci.yml

# A descriptive name for your workflow
name: Build and Push Docker Image

# --- TRIGGER ---
# This workflow runs on every push to the 'main' branch
on:
  push:
    branches: [ "main" ]

# --- JOBS ---
# A workflow is made up of one or more jobs that run in parallel or sequentially.
jobs:
  build-and-push:
    # The type of machine to run the job on. 'ubuntu-latest' is the standard.
    runs-on: ubuntu-latest
    
    # --- PERMISSIONS ---
    # This is the crucial part. We grant the GITHUB_TOKEN the necessary permissions.
    permissions:
      contents: read  # Needed to check out the repository code
      packages: write # Needed to push packages (container images) to GHCR

    # --- STEPS ---
    # A job is made up of a sequence of steps.
    steps:
      # Step 1: Check out your repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to the GitHub Container Registry (GHCR)
      # This uses the official Docker login action.
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # 'github.actor' is your GitHub username.
          # The password is the automatically generated GITHUB_TOKEN.
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Extract metadata (like tags and labels) for the Docker image
      # This action is incredibly useful. It automatically creates tags based on the Git event.
      # For a push to main, it will create tags like 'latest' and the Git SHA.
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # e.g., ghcr.io/pkp1/personal-finance-webapp

      # Step 4: Build and push the Docker image
      # This action combines 'docker build' and 'docker push' into one step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the repository root as the build context
          push: true # Actually push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use the labels generated by the metadata action